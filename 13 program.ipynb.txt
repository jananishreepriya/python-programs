{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.6.15","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":5,"nbformat":4,"cells":[{"id":"71c26027-a7ae-4b47-89a1-a84d229f4433","cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n# Load dataset\ndf = pd.read_csv(\"customer_data.csv\")\n# Encode target variable\ndf[\"Spending_Category\"] = LabelEncoder().fit_transform(df[\"Spending_Category\"])\n# Split features and target\nX = df.drop(columns=[\"Spending_Category\"])\ny = df[\"Spending_Category\"]\n# Train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# Standardize data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n# Train model\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train, y_train)\n# Predictions\ny_pred = knn.predict(X_test)\n# Accuracy\nprint(\"Model Accuracy:\", round(accuracy_score(y_test, y_pred) * 100, 2), \"%\")\n# Confusion matrix\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=True, cmap=\"Blues\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.title(\"Confusion Matrix\")\nplt.show()","metadata":{"trusted":true},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-2e3264f1206c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mseaborn\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel_selection\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpreprocessing\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mStandardScaler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mLabelEncoder\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'seaborn'"],"ename":"ModuleNotFoundError","evalue":"No module named 'seaborn'","output_type":"error"}],"execution_count":1},{"id":"927884fe-7fcb-4eae-94a2-4e9b9ac2ab91","cell_type":"code","source":"pip install seaborn","metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"Collecting seaborn\n  Downloading seaborn-0.11.2-py3-none-any.whl (292 kB)\n     |████████████████████████████████| 292 kB 16.0 MB/s            \n\u001b[?25hRequirement already satisfied: matplotlib>=2.2 in /srv/conda/envs/kernel/lib/python3.6/site-packages (from seaborn) (3.3.4)\nRequirement already satisfied: scipy>=1.0 in /srv/conda/envs/kernel/lib/python3.6/site-packages (from seaborn) (1.5.3)\nRequirement already satisfied: pandas>=0.23 in /srv/conda/envs/kernel/lib/python3.6/site-packages (from seaborn) (1.1.5)\nRequirement already satisfied: numpy>=1.15 in /srv/conda/envs/kernel/lib/python3.6/site-packages (from seaborn) (1.19.5)\nRequirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in /srv/conda/envs/kernel/lib/python3.6/site-packages (from matplotlib>=2.2->seaborn) (3.0.7)\nRequirement already satisfied: kiwisolver>=1.0.1 in /srv/conda/envs/kernel/lib/python3.6/site-packages (from matplotlib>=2.2->seaborn) (1.3.1)\nRequirement already satisfied: cycler>=0.10 in /srv/conda/envs/kernel/lib/python3.6/site-packages (from matplotlib>=2.2->seaborn) (0.11.0)\nRequirement already satisfied: python-dateutil>=2.1 in /srv/conda/envs/kernel/lib/python3.6/site-packages (from matplotlib>=2.2->seaborn) (2.8.2)\nRequirement already satisfied: pillow>=6.2.0 in /srv/conda/envs/kernel/lib/python3.6/site-packages (from matplotlib>=2.2->seaborn) (8.3.2)\nRequirement already satisfied: pytz>=2017.2 in /srv/conda/envs/kernel/lib/python3.6/site-packages (from pandas>=0.23->seaborn) (2022.1)\nRequirement already satisfied: six>=1.5 in /srv/conda/envs/kernel/lib/python3.6/site-packages (from python-dateutil>=2.1->matplotlib>=2.2->seaborn) (1.16.0)\nInstalling collected packages: seaborn\nSuccessfully installed seaborn-0.11.2\nNote: you may need to restart the kernel to use updated packages.\n"}],"execution_count":2},{"id":"cb9b6eeb-99fb-46ef-86d6-00373defa0b8","cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n# Load dataset\ndf = pd.read_csv(\"customer_data.csv\")\n# Encode target variable\ndf[\"Spending_Category\"] = LabelEncoder().fit_transform(df[\"Spending_Category\"])\n# Split features and target\nX = df.drop(columns=[\"Spending_Category\"])\ny = df[\"Spending_Category\"]\n# Train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# Standardize data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n# Train model\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train, y_train)\n# Predictions\ny_pred = knn.predict(X_test)\n# Accuracy\nprint(\"Model Accuracy:\", round(accuracy_score(y_test, y_pred) * 100, 2), \"%\")\n# Confusion matrix\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=True, cmap=\"Blues\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.title(\"Confusion Matrix\")\nplt.show()","metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"Model Accuracy: 50.0 %\n"},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 2 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}],"execution_count":3},{"id":"a2917798-fd1c-4737-b312-08bb0ec298af","cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}